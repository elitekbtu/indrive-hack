"""
LLM Service for generating comprehensive car condition reports
using Azure OpenAI GPT-4 to transform technical analysis into business insights
"""

import os
import json
from typing import Dict, Any
from openai import AzureOpenAI
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class CarAnalysisLLMService:
    def __init__(self):
        try:
            self.client = AzureOpenAI(
                api_key=os.getenv("AZURE_OPENAI_API_KEY"),
                api_version="2024-02-15-preview",
                azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT")
            )
            self.deployment_name = os.getenv("AZURE_OPENAI_GPT4O_DEPLOYMENT_NAME", "gpt-4o")
            self.available = True
        except Exception as e:
            print(f"Warning: LLM service initialization failed: {e}")
            print("LLM features will be disabled, but core analysis will work")
            self.client = None
            self.deployment_name = None
            self.available = False
    
    def generate_comprehensive_report(self, technical_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate comprehensive reports for different stakeholders based on technical analysis
        """
        # Calculate condition score first (always works)
        condition_score = self._calculate_condition_score(technical_analysis)
        
        if not self.available or not self.client:
            # Fallback when LLM is not available
            return {
                "condition_score": condition_score,
                "driver_report": self._generate_fallback_driver_report(technical_analysis),
                "passenger_report": self._generate_fallback_passenger_report(technical_analysis),
                "business_report": self._generate_fallback_business_report(technical_analysis),
                "recommendations": self._generate_fallback_recommendations(technical_analysis, condition_score)
            }
        
        try:
            # Prepare context for LLM
            analysis_context = self._prepare_analysis_context(technical_analysis)
            
            # Generate reports for different stakeholders
            driver_report = self._generate_driver_report(analysis_context)
            passenger_report = self._generate_passenger_report(analysis_context)
            business_report = self._generate_business_report(analysis_context)
            
            return {
                "condition_score": condition_score,
                "driver_report": driver_report,
                "passenger_report": passenger_report,
                "business_report": business_report,
                "recommendations": self._generate_recommendations(analysis_context, condition_score)
            }
        
        except Exception as e:
            # Fallback on error
            return {
                "error": f"LLM service error: {str(e)}",
                "condition_score": condition_score,
                "driver_report": self._generate_fallback_driver_report(technical_analysis),
                "passenger_report": self._generate_fallback_passenger_report(technical_analysis),
                "business_report": self._generate_fallback_business_report(technical_analysis),
                "recommendations": self._generate_fallback_recommendations(technical_analysis, condition_score)
            }
    
    def _prepare_analysis_context(self, analysis: Dict[str, Any]) -> str:
        """Prepare comprehensive structured context for LLM analysis"""
        is_damaged = analysis.get("is_damaged", False)
        damage_confidence = 0
        damage_details = ""
        cleanliness_details = ""
        
        # Detailed damage analysis
        if is_damaged:
            damage_local = analysis.get("damage_local", {})
            damage_confidence = damage_local.get("damage_prob", 0)
            damage_details += f"–ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–´ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {damage_confidence:.1%}\n"
            
            # Specific damage location analysis
            damage_parts = analysis.get("damage_parts_local", {})
            if damage_parts and "pred_label" in damage_parts:
                part_label = damage_parts["pred_label"]
                part_confidence = damage_parts.get("pred_score", 0)
                damage_details += f"–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å: {part_label} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {part_confidence:.1%})\n"
                
                # Translate technical labels to user-friendly descriptions
                part_translations = {
                    "doorouter-dent": "–í–Ω–µ—à–Ω—è—è –¥–≤–µ—Ä—å - –≤–º—è—Ç–∏–Ω–∞",
                    "bumper-scratch": "–ë–∞–º–ø–µ—Ä - —Ü–∞—Ä–∞–ø–∏–Ω–∞", 
                    "hood-dent": "–ö–∞–ø–æ—Ç - –≤–º—è—Ç–∏–Ω–∞",
                    "fender-scratch": "–ö—Ä—ã–ª–æ - —Ü–∞—Ä–∞–ø–∏–Ω–∞"
                }
                friendly_part = part_translations.get(part_label, part_label)
                damage_details += f"–û–ø–∏—Å–∞–Ω–∏–µ: {friendly_part}\n"
            
            # Damage type analysis
            rust_scratch = analysis.get("rust_scratch", {})
            if rust_scratch and "pred_label" in rust_scratch:
                damage_type = rust_scratch["pred_label"]
                type_confidence = rust_scratch.get("pred_score", 0)
                if damage_type != "car":  # Filter out generic "car" predictions
                    damage_details += f"–¢–∏–ø –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è: {damage_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {type_confidence:.1%})\n"
        else:
            damage_details = "–ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–´ - –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ü–µ–ª–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏\n"
        
        # Cleanliness analysis
        dirty_result = analysis.get("dirty")
        if dirty_result:
            clean_prob = dirty_result.get("clean_prob", 0)
            dirty_prob = dirty_result.get("dirty_prob", 0)
            
            if dirty_prob > clean_prob:
                cleanliness_details = f"–ß–ò–°–¢–û–¢–ê: –ê–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {dirty_prob:.1%})\n"
                cleanliness_details += f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —á–∏—Å—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤\n"
            else:
                cleanliness_details = f"–ß–ò–°–¢–û–¢–ê: –ê–≤—Ç–æ–º–æ–±–∏–ª—å —á–∏—Å—Ç—ã–π (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {clean_prob:.1%})\n"
                cleanliness_details += f"–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–∞–º\n"
        elif not is_damaged:
            cleanliness_details = "–ß–ò–°–¢–û–¢–ê: –ê–Ω–∞–ª–∏–∑ —á–∏—Å—Ç–æ—Ç—ã –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–µ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n"
        
        # Model confidence summary
        confidence_summary = ""
        if is_damaged and damage_confidence > 0.9:
            confidence_summary = "–í–´–°–û–ö–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨ –ú–û–î–ï–õ–ò - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–µ–Ω—å –Ω–∞–¥–µ–∂–Ω—ã"
        elif is_damaged and damage_confidence > 0.7:
            confidence_summary = "–°–†–ï–î–ù–Ø–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨ –ú–û–î–ï–õ–ò - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥–µ–∂–Ω—ã"
        elif is_damaged:
            confidence_summary = "–ù–ò–ó–ö–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨ –ú–û–î–ï–õ–ò - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
        else:
            confidence_summary = "–ê–í–¢–û–ú–û–ë–ò–õ–¨ –í –•–û–†–û–®–ï–ú –°–û–°–¢–û–Ø–ù–ò–ò"
        
        return f"""
–†–ï–ó–£–õ–¨–¢–ê–¢–´ AI-–ê–ù–ê–õ–ò–ó–ê –ê–í–¢–û–ú–û–ë–ò–õ–Ø:

{damage_details}

{cleanliness_details}

–û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {confidence_summary}

–¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
- –ò—Å—Ç–æ—á–Ω–∏–∫ –∞–Ω–∞–ª–∏–∑–∞: {analysis.get('damage_source', 'local')} –º–æ–¥–µ–ª–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã 4 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ AI-–º–æ–¥–µ–ª–∏
- –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ–¥–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º EfficientNet-B0 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""
    
    def _generate_driver_report(self, context: str) -> str:
        """Generate empowering report for driver rating optimization"""
        prompt = f"""
        –¢—ã - AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤–æ–¥–∏—Ç–µ–ª—è inDrive, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –£–í–ï–õ–ò–ß–ò–¢–¨ –ó–ê–†–ê–ë–û–¢–û–ö —á–µ—Ä–µ–∑ –∫–∞—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.

        {context}

        –°–æ–∑–¥–∞–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Å—Ç–∏–ª–µ "–ª–∏—á–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É":

        1. –í–õ–ò–Ø–ù–ò–ï –ù–ê –ó–ê–†–ê–ë–û–¢–û–ö (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
        - –ï—Å–ª–∏ –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: "üí∞ –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ 15-20% –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤!"
        - –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã: "‚ö†Ô∏è –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –≤–∞—à–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ X%"

        2. –ö–û–ù–ö–†–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:
        - –ï—Å–ª–∏ –≥—Ä—è–∑–Ω—ã–π: "üßΩ –ë—ã—Å—Ç—Ä–∞—è –º–æ–π–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å 5-–∑–≤–µ–∑–¥–æ—á–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥"
        - –ï—Å–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è: "üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∑–∞—â–∏—Ç–∏—Ç –æ—Ç –ª–æ–∂–Ω—ã—Ö –ø—Ä–µ—Ç–µ–Ω–∑–∏–π"
        - –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ: "‚ú® –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ - –ø–∞—Å—Å–∞–∂–∏—Ä—ã —ç—Ç–æ —Ü–µ–Ω—è—Ç!"

        3. –°–ò–°–¢–ï–ú–ê –ú–û–¢–ò–í–ê–¶–ò–ò:
        - –°–≤—è–∑—å –∫–∞—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤–æ–¥–∏—Ç–µ–ª—è
        - –í–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        - –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ—Ç–µ–Ω–∑–∏–π

        –¢–æ–Ω: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, —Ñ–æ–∫—É—Å –Ω–∞ –¥–µ–Ω—å–≥–∞—Ö –∏ —É—Å–ø–µ—Ö–µ.
        –§–æ—Ä–º–∞—Ç: push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è.
        –û–±—ä–µ–º: –¥–æ 120 —Å–ª–æ–≤.
        """
        
        response = self.client.chat.completions.create(
            model=self.deployment_name,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=300,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
    
    def _generate_passenger_report(self, context: str) -> str:
        """Generate trust-building report for passenger safety and comfort"""
        prompt = f"""
        –¢—ã - AI-—Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ inDrive. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ü–ê–°–°–ê–ñ–ò–†–ê –ø–µ—Ä–µ–¥ –ø–æ–µ–∑–¥–∫–æ–π.

        {context}

        –°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –≤ —Å—Ç–∏–ª–µ "Verified by inDrive AI", –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:

        1. –°–¢–ê–¢–£–° –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞):
        - –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π: "‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –ø–æ–µ–∑–¥–∫–∏"
        - –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è: "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞—Ä—É—à–µ–Ω–∞"
        - –ï—Å–ª–∏ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è: "üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"

        2. –ö–†–ê–¢–ö–û–ï –û–ë–™–Ø–°–ù–ï–ù–ò–ï (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ)

        3. –ë–ê–î–ñ –î–û–í–ï–†–ò–Ø (–µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç):
        - "Verified Clean & Intact" 
        - "Minor Issues Disclosed"
        - "Safety Verified"

        –¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –≤—ã–∑—ã–≤–∞—é—â–∏–π –¥–æ–≤–µ—Ä–∏–µ.
        –§–æ—Ä–º–∞—Ç: –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞.
        –û–±—ä–µ–º: –¥–æ 80 —Å–ª–æ–≤.
        """
        
        response = self.client.chat.completions.create(
            model=self.deployment_name,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=200,
            temperature=0.3
        )
        
        return response.choices[0].message.content.strip()
    
    def _generate_business_report(self, context: str) -> str:
        """Generate strategic business intelligence for inDrive operations"""
        prompt = f"""
        –¢—ã - AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ inDrive. –°–æ–∑–¥–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø –ë–ò–ó–ù–ï–°–ê.

        {context}

        –°–æ–∑–¥–∞–π –±–∏–∑–Ω–µ—Å-–æ—Ç—á–µ—Ç –≤ —Å—Ç–∏–ª–µ "Executive Dashboard":

        1. –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
        - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: "–ó–∞–º–µ–Ω—è–µ—Ç X —á–∞—Å–æ–≤ —Ä—É—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"
        - –ú–∞—Å—à—Ç–∞–±: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Y –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –¥–µ–Ω—å"
        - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: "–°–Ω–∏–∂–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ Z%"

        2. –ö–ê–ß–ï–°–¢–í–û –§–õ–û–¢–ê:
        - –ï—Å–ª–∏ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: "üìà –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º inDrive"
        - –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã: "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"
        - –†–∏—Å–∫-–æ—Ü–µ–Ω–∫–∞: "–ù–∏–∑–∫–∏–π/–°—Ä–µ–¥–Ω–∏–π/–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –¥–ª—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏"

        3. –°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –î–ï–ô–°–¢–í–ò–Ø:
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        - –°–æ–∑–¥–∞–Ω–∏–µ "Vehicle Quality Score" –¥–ª—è –≤—Å–µ–≥–æ —Ñ–ª–æ—Ç–∞
        - –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ —Ä—É—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö
        - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∂–∞–ª–æ–± –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤

        4. ROI IMPACT:
        - –í–ª–∏—è–Ω–∏–µ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
        - –°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤
        - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è Quality Assurance

        –¢–æ–Ω: –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ ROI.
        –§–æ—Ä–º–∞—Ç: —Å–≤–æ–¥–∫–∞ –¥–ª—è C-level —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.
        –û–±—ä–µ–º: –¥–æ 150 —Å–ª–æ–≤.
        """
        
        response = self.client.chat.completions.create(
            model=self.deployment_name,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=350,
            temperature=0.3
        )
        
        return response.choices[0].message.content.strip()
    
    def _generate_recommendations(self, context: str, score: int) -> list:
        """Generate highly specific, actionable recommendations based on detailed analysis"""
        prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–æ—Ü–µ–Ω–∫–∞ {score}/100) —Å–æ–∑–¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, actionable —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

        {context}

        –°–æ–∑–¥–∞–π JSON –º–∞—Å—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫–∞–∂–¥–∞—è –≤–∫–ª—é—á–∞–µ—Ç:
        - "action": –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤–º—è—Ç–∏–Ω—É –Ω–∞ –≤–Ω–µ—à–Ω–µ–π –¥–≤–µ—Ä–∏")
        - "impact": –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü–æ–≤—ã—Å–∏—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ 0.2-0.3 –±–∞–ª–ª–∞")  
        - "priority": –≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π (–æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ confidence –∏ –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
        - "cost_estimate": –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ("50-100$" –∏–ª–∏ "–±–µ—Å–ø–ª–∞—Ç–Ω–æ")
        - "time_estimate": –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ("30 –º–∏–Ω—É—Ç", "1-2 –¥–Ω—è")

        –ü–†–ê–í–ò–õ–ê:
        1. –ï—Å–ª–∏ confidence > 90% - priority = "–≤—ã—Å–æ–∫–∏–π"
        2. –ï—Å–ª–∏ –µ—Å—Ç—å damage - –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π repair recommendations
        3. –ï—Å–ª–∏ dirty - –≤–∫–ª—é—á–∞–π cleaning recommendations
        4. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        5. –ú–∞–∫—Å–∏–º—É–º 4 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

        –§–æ—Ä–º–∞—Ç: —Å—Ç—Ä–æ–≥–∏–π JSON –º–∞—Å—Å–∏–≤, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.deployment_name,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500,
                temperature=0.4
            )
            
            recommendations_text = response.choices[0].message.content.strip()
            # Clean the response to extract JSON
            if "```json" in recommendations_text:
                recommendations_text = recommendations_text.split("```json")[1].split("```")[0]
            elif "```" in recommendations_text:
                recommendations_text = recommendations_text.split("```")[1]
            
            try:
                return json.loads(recommendations_text)
            except:
                # Enhanced fallback with specific damage information
                return self._generate_enhanced_fallback_recommendations(context, score)
        except:
            return self._generate_enhanced_fallback_recommendations(context, score)

        –°–æ–∑–¥–∞–π 3-4 –°–£–ü–ï–†-–ö–û–ù–ö–†–ï–¢–ù–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:

        –î–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:
        - –ï—Å–ª–∏ –≥—Ä—è–∑–Ω—ã–π: "–ú–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤" + "–£–≤–µ–ª–∏—á–∏—Ç –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ 15%"
        - –ï—Å–ª–∏ —Ü–∞—Ä–∞–ø–∏–Ω—ã: "–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∫—É–∑–æ–≤–∞ –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–µ" + "–ó–∞—â–∏—Ç–∏—Ç –æ—Ç –ª–æ–∂–Ω—ã—Ö –ø—Ä–µ—Ç–µ–Ω–∑–∏–π"
        - –ï—Å–ª–∏ –≤–º—è—Ç–∏–Ω—ã: "–†–∏—Ö—Ç–æ–≤–∫–∞ –≤ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ" + "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å"

        –î–ª—è inDrive:
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–ª–∞–≥ –∫–∞—á–µ—Å—Ç–≤–∞
        - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
        - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        –§–æ—Ä–º–∞—Ç JSON:
        [
          {{
            "action": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            "impact": "–ò–∑–º–µ—Ä–∏–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "priority": "–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π",
            "stakeholder": "driver/passenger/indrive",
            "timeline": "—Å—Ä–æ—á–Ω–æ/1-3 –¥–Ω—è/–Ω–µ–¥–µ–ª—è",
            "cost_benefit": "—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç"
          }}
        ]

        –¢–æ–ª—å–∫–æ JSON –º–∞—Å—Å–∏–≤, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.deployment_name,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=400,
                temperature=0.4
            )
            
            recommendations_text = response.choices[0].message.content.strip()
            # Try to parse JSON, fallback to structured recommendations if fails
            try:
                import json
                return json.loads(recommendations_text)
            except:
                # Fallback to enhanced structured recommendations
                return self._generate_enhanced_fallback_recommendations(context, score)
        except:
            return self._generate_enhanced_fallback_recommendations(context, score)
    
    def _calculate_condition_score(self, analysis: Dict[str, Any]) -> int:
        """Calculate overall car condition score (0-100)"""
        score = 100
        
        # Damage penalty
        if analysis.get("is_damaged", False):
            damage_parts = analysis.get("damage_parts_local", {})
            rust_scratch = analysis.get("rust_scratch", {})
            
            # Base damage penalty
            score -= 40
            
            # Additional penalties based on damage type
            if rust_scratch and "pred_label" in rust_scratch:
                damage_type = rust_scratch["pred_label"].lower()
                if "rust" in damage_type:
                    score -= 15  # Rust is serious
                elif "dent" in damage_type:
                    score -= 10  # Dents affect appearance
                elif "scratch" in damage_type:
                    score -= 5   # Scratches are cosmetic
        
        # Cleanliness penalty
        dirty_result = analysis.get("dirty", {})
        if dirty_result:
            dirty_prob = dirty_result.get("dirty_prob", 0)
            clean_prob = dirty_result.get("clean_prob", 1)
            
            if dirty_prob > clean_prob:
                # Scale penalty based on confidence
                cleanliness_penalty = int(20 * dirty_prob)
                score -= cleanliness_penalty
        
        # Ensure score is within bounds
        return max(0, min(100, score))

    def _generate_enhanced_fallback_recommendations(self, context: str, score: int) -> list:
        """Generate enhanced fallback recommendations based on analysis"""
        recommendations = []
        
        # Parse the context to understand the issues
        is_damaged = "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã" in context.lower() or "–æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã" in context.lower()
        is_dirty = "–∑–∞–≥—Ä—è–∑–Ω–µ–Ω" in context.lower() or "–≥—Ä—è–∑–Ω—ã–π" in context.lower()
        
        if is_damaged:
            if "—Ü–∞—Ä–∞–ø–∏–Ω—ã" in context.lower() or "scratch" in context.lower():
                recommendations.append({
                    "action": "–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∫—É–∑–æ–≤–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ü–∞—Ä–∞–ø–∏–Ω",
                    "impact": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ 5-8%, –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ—Ç–µ–Ω–∑–∏–π",
                    "priority": "—Å—Ä–µ–¥–Ω–∏–π",
                    "stakeholder": "driver",
                    "timeline": "1-3 –¥–Ω—è",
                    "cost_benefit": "–°—Ç–æ–∏–º–æ—Å—Ç—å: 3000-5000‚ÇΩ, –ø—Ä–∏–±—ã–ª—å: +15% –∑–∞–∫–∞–∑–æ–≤"
                })
            if "–≤–º—è—Ç–∏–Ω" in context.lower() or "dent" in context.lower():
                recommendations.append({
                    "action": "–†–∏—Ö—Ç–æ–≤–∫–∞ –∫—É–∑–æ–≤–∞ –≤ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ",
                    "impact": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞, —Å—Ç—Ä–∞—Ö–æ–≤–∞—è –∑–∞—â–∏—Ç–∞",
                    "priority": "–≤—ã—Å–æ–∫–∏–π",
                    "stakeholder": "driver",
                    "timeline": "—Å—Ä–æ—á–Ω–æ",
                    "cost_benefit": "ROI: 300% –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤"
                })
        
        if is_dirty:
            recommendations.append({
                "action": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –º–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                "impact": "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ 0.3-0.5 –∑–≤–µ–∑–¥, +15% –∑–∞–∫–∞–∑–æ–≤",
                "priority": "–≤—ã—Å–æ–∫–∏–π",
                "stakeholder": "driver", 
                "timeline": "24 —á–∞—Å–∞",
                "cost_benefit": "–°—Ç–æ–∏–º–æ—Å—Ç—å: 800‚ÇΩ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: +2000‚ÇΩ/–Ω–µ–¥–µ–ª—è"
            })
        
        # Business recommendations
        if score < 80:
            recommendations.append({
                "action": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "impact": "–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–ª–æ—Ç–∞",
                "priority": "—Å—Ä–µ–¥–Ω–∏–π",
                "stakeholder": "indrive",
                "timeline": "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ",
                "cost_benefit": "–°–Ω–∏–∂–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ 25%"
            })
        
        # Always add quality monitoring
        recommendations.append({
            "action": "–í–∫–ª—é—á–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞",
            "impact": "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∂–∞–ª–æ–± –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è QA",
            "priority": "—Å—Ä–µ–¥–Ω–∏–π",
            "stakeholder": "indrive",
            "timeline": "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ",
            "cost_benefit": "–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Ä—É—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö: 60% –≤—Ä–µ–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
        })
        
        return recommendations[:4]  # Return max 4 recommendations

    def _generate_enhanced_fallback_recommendations(self, context: str, score: int) -> list:
        """Generate enhanced fallback recommendations using context analysis"""
        recommendations = []
        
        # Parse context for specific damage information
        if "–ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–´" in context:
            if "doorouter-dent" in context:
                recommendations.append({
                    "action": "–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤–º—è—Ç–∏–Ω—É –Ω–∞ –≤–Ω–µ—à–Ω–µ–π –¥–≤–µ—Ä–∏",
                    "impact": "–ü–æ–≤—ã—Å–∏—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –∏ —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è",
                    "priority": "–≤—ã—Å–æ–∫–∏–π",
                    "cost_estimate": "150-300$",
                    "time_estimate": "1-2 –¥–Ω—è"
                })
            elif "bumper" in context.lower():
                recommendations.append({
                    "action": "–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –±–∞–º–ø–µ—Ä–∞",
                    "impact": "–û–±–µ—Å–ø–µ—á–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
                    "priority": "–≤—ã—Å–æ–∫–∏–π", 
                    "cost_estimate": "200-500$",
                    "time_estimate": "2-3 –¥–Ω—è"
                })
            else:
                recommendations.append({
                    "action": "–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è",
                    "impact": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–æ–¥–∏—Ç–µ–ª—è",
                    "priority": "–≤—ã—Å–æ–∫–∏–π",
                    "cost_estimate": "100-400$",
                    "time_estimate": "1-3 –¥–Ω—è"
                })
        
        # Cleanliness recommendations
        if "–∑–∞–≥—Ä—è–∑–Ω–µ–Ω" in context:
            recommendations.append({
                "action": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –º–æ–π–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                "impact": "–£–ª—É—á—à–∏—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏",
                "priority": "—Å—Ä–µ–¥–Ω–∏–π",
                "cost_estimate": "20-40$",
                "time_estimate": "1-2 —á–∞—Å–∞"
            })
        
        # General maintenance based on score
        if score < 70:
            recommendations.append({
                "action": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
                "impact": "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –±—É–¥—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º –∏ –∑–∞—Ç—Ä–∞—Ç",
                "priority": "–≤—ã—Å–æ–∫–∏–π",
                "cost_estimate": "50-150$", 
                "time_estimate": "3-4 —á–∞—Å–∞"
            })
        elif score < 90:
            recommendations.append({
                "action": "–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                "impact": "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞",
                "priority": "—Å—Ä–µ–¥–Ω–∏–π",
                "cost_estimate": "30-80$",
                "time_estimate": "1-2 —á–∞—Å–∞"
            })
        
        # Always add a proactive recommendation
        if score >= 80:
            recommendations.append({
                "action": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞",
                "impact": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
                "priority": "–Ω–∏–∑–∫–∏–π",
                "cost_estimate": "–±–µ—Å–ø–ª–∞—Ç–Ω–æ",
                "time_estimate": "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ"
            })
        
        return recommendations[:4]  # Limit to 4 recommendations

    def _generate_fallback_driver_report(self, analysis: Dict[str, Any]) -> str:
        """Generate basic driver report without LLM"""
        is_damaged = analysis.get("is_damaged", False)
        score = self._calculate_condition_score(analysis)
        
        if is_damaged:
            return f"üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–æ—Ü–µ–Ω–∫–∞: {score}/100). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∏ –≤ inDrive."
        else:
            return f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–æ—Ü–µ–Ω–∫–∞: {score}/100). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —á–∏—Å—Ç–æ—Ç—É –∏ –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤. –ü–∞—Å—Å–∞–∂–∏—Ä—ã —Ü–µ–Ω—è—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å!"

    def _generate_fallback_passenger_report(self, analysis: Dict[str, Any]) -> str:
        """Generate basic passenger report without LLM"""
        is_damaged = analysis.get("is_damaged", False)
        score = self._calculate_condition_score(analysis)
        
        if is_damaged:
            return f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {score}/100. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞."
        else:
            return f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è. –û—Ü–µ–Ω–∫–∞: {score}/100. –ü–æ–µ–∑–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π."

    def _generate_fallback_business_report(self, analysis: Dict[str, Any]) -> str:
        """Generate basic business report without LLM"""
        is_damaged = analysis.get("is_damaged", False)
        score = self._calculate_condition_score(analysis)
        
        if score < 70:
            return f"üìä –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ: –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è {score}/100. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ inDrive."
        else:
            return f"üìà –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞: –æ—Ü–µ–Ω–∫–∞ {score}/100. –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º inDrive –∏ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º—É –æ–ø—ã—Ç—É –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤."

    def _generate_fallback_recommendations(self, analysis: Dict[str, Any], score: int) -> list:
        """Generate basic recommendations without LLM"""
        recommendations = []
        
        if analysis.get("is_damaged", False):
            recommendations.append({
                "action": "–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                "impact": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–æ–¥–∏—Ç–µ–ª—è",
                "priority": "–≤—ã—Å–æ–∫–∏–π"
            })
        
        dirty_result = analysis.get("dirty", {})
        if dirty_result and dirty_result.get("dirty_prob", 0) > 0.5:
            recommendations.append({
                "action": "–ü—Ä–æ–≤–µ—Å—Ç–∏ —á–∏—Å—Ç–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                "impact": "–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
                "priority": "—Å—Ä–µ–¥–Ω–∏–π"
            })
        
        if score < 80:
            recommendations.append({
                "action": "–û–±—â–∏–π –æ—Å–º–æ—Ç—Ä –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                "impact": "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞",
                "priority": "—Å—Ä–µ–¥–Ω–∏–π" if score > 60 else "–≤—ã—Å–æ–∫–∏–π"
            })
        
        return recommendations

# Global instance
llm_service = CarAnalysisLLMService()